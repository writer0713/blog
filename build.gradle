buildscript {
    ext {
        springBootVersion = '2.1.2.RELEASE'
        slf4jVersion = '1.7.21'
        log4j2Version = '2.5'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id "com.eriwen.gradle.js" version "2.14.1"
    id "com.eriwen.gradle.css" version "2.14.0"
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'js'
apply plugin: 'css'


group = 'com.writer0713'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
    mavenCentral()
}

dependencies {
//    implementation 'org.springframework.boot:spring-boot-starter-security'
    compile ('org.springframework.boot:spring-boot-starter-thymeleaf') {
        exclude module: 'spring-boot-starter-logging'
    }
    compile ('org.springframework.boot:spring-boot-starter-web') {
        exclude module: 'spring-boot-starter-logging'
    }
    runtimeOnly 'org.springframework.boot:spring-boot-devtools'
    compileOnly 'org.projectlombok:lombok'

    // logging
    compile("org.slf4j:slf4j-api:${slf4jVersion}")
    compile("org.apache.logging.log4j:log4j-api:${log4j2Version}")
    compile("org.apache.logging.log4j:log4j-core:${log4j2Version}")
    compile("org.apache.logging.log4j:log4j-slf4j-impl:${log4j2Version}")

    compile group: 'org.jsoup', name: 'jsoup', version: '1.11.3'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
}
allprojects {
    ext.profile = (!System.getenv('profile') || !project.hasProperty('profile') || !profile) ? 'prod' : 'local'

    sourceSets {
        main {
            resources {
                srcDirs "src/main/resources", "src/main/resources-${profile}"
            }
        }
    }
}

def jsDir = "${projectDir}/src/main/resources/static/js/"
def jsFiles = ["jquery.min.js", "bootstrap.js", "codemirror.min.js", "clike.min.js", "custom.js"]

def cssDir = "${projectDir}/src/main/resources/static/css/"
def cssFiles = ["404.css", "bootstrap.css", "bootstrap-theme.css", "font-awesome.min.css", "codemirror.min.css", "material.min.css", "style.css"]


combineJs {
    encoding = "UTF-8"
    source = jsFiles.collect { elem -> return jsDir + elem }
    dest = file("${jsDir}/all.js")
}

combineCss {
    source = cssFiles.collect { elem -> return cssDir + elem }
    dest = file("${cssDir}/all.css")
}

minifyJs {
    source = combineJs
    dest = file("${jsDir}/all-min.js")
    sourceMap = file("${jsDir}/all.sourcemap.json")
    closure {
        warningLevel = 'QUIET'
        compilerOptions.languageIn="ECMASCRIPT6"
        compilerOptions.languageOut="ECMASCRIPT5"
    }
}

minifyCss {
    source = combineCss
    dest = "${cssDir}/all-min.css"
    yuicompressor { // Optional
        lineBreakPos = -1
    }
}

compileJava.dependsOn(clean)
assemble.dependsOn(minifyJs, minifyCss)